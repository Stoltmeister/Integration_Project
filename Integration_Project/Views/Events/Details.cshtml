@model Integration_Project.Models.EventInterestsViewModel

@{
    ViewData["Title"] = "Details";
}
@{
    var imgSrc = "Hello";
    if (Model.CurrentEvent.EventPicture != null)
    {
        var base64 = Convert.ToBase64String(Model.CurrentEvent.EventPicture);
        imgSrc = String.Format("data:image/gif;base64,{0}", base64);
    }
    else
    {
        imgSrc = "https://images.pexels.com/photos/534031/pexels-photo-534031.jpeg";
    }
}
</br>
<div class="row">

    <div class="text-center">
        <img src=@imgSrc alt="" height="200" width="300" />
    </div>
</div>


<link href="~/css/site.css" rel="stylesheet" />

<style>
    .table-bordered {
        padding: 5px;
    }

    .row {
        border: groove;
        padding: 5px;
    }

    
</style>
<div class="row">
    <div class="col-md-4">
        <div class="text-center"><h2>Event Information</h2></div>
        <dl class="table-bordered">
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.StartDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.StartDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.EndDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.EndDate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.Description)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.Premium)
            </dt>
            @if (Model.CurrentEvent.Premium == 0)
            {
                <dd>
                    @Html.Display("No")
                </dd>
            }
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.Premium)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.IsPrivate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.IsPrivate)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.IsWeatherDependent)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.IsWeatherDependent)
            </dd>
            @if (Model.CurrentEvent.IsWeatherDependent == true)
            {
                <dt>
                    @Html.DisplayNameFor(model => model.Forecast)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.Forecast)
                </dd>
            }
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.MinParticipants)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.MinParticipants)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.MaxParticipants)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.MaxParticipants)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CurrentEvent.CanInviteParticipants)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CurrentEvent.CanInviteParticipants)
            </dd>
        </dl>
        @if (Model.isOrganizer)
        {
            <p>
                @Html.ActionLink("Invite People ", "Invite", new { Id = Model.CurrentEvent.Id })
                |
            </p>
        }
        @if (Model.isOrganizer)
        {
            <p>
                <a asp-action="Edit" asp-route-id="@Model.CurrentEvent.Id">    Edit </a> |
            </p>
        }

        <a asp-action="Index" asp-controller="Search">Back to Search</a>
    </div>
    <div class="col-md-8">
        <div class="text-center"><h2>Venue Information</h2></div>
        @if (Model.CurrentVenue != null)
        {
        <div class="col-md-6">

            <dl class="table-bordered">
                <dt>
                    @Html.DisplayNameFor(model => model.CurrentVenue.Name)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.CurrentVenue.Name)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.CurrentVenue.Description)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.CurrentVenue.Description)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.CurrentVenue.City)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.CurrentVenue.City)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.CurrentVenue.State)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.CurrentVenue.State)
                </dd>
                <dt>
                    @Html.DisplayNameFor(model => model.CurrentVenue.Zipcode)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.CurrentVenue.Zipcode)
                </dd>
            </dl>
            @if (Model.isOrganizer)
            {
                <a asp-action="SelectVenue" asp-route-id="@Model.CurrentEvent.Id">Change Venue</a>
            }
        </div>
        <div class="col-md-6">
            <style>
                #map {
                    height: 400px;
                    width: 100%;
                }
            </style>
            <div id="map"></div>
            <script src="~/js/GoogleMaps.js"></script>
            <script>
                function mapCallback() {
                    var name = "@Model.CurrentVenue.Name"
                    var address = "@Model.CurrentVenue.Address"
                    var latitude = @Model.CurrentVenue.Latitude
                    var longitude = @Model.CurrentVenue.Longitude
                    var map = initMap(latitude, longitude);

                    addMarker(latitude, longitude, name, address, map);
                }
            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.googleMapsKey&callback=mapCallback"
                    async defer></script>
        </div>
        }
        else
        {
            <h4>No Venue Assigned yet</h4>
            
            <a asp-action="SelectVenue" asp-route-id="@Model.CurrentEvent.Id">Add Venue</a>
        }
    </div>
</div>




<div class="row">
    <div class="col-md-6">
        <h3>Interests</h3>
        <div class="table-bordered">
            @foreach (var item in Model.AddedInterests)
            {
                <p>
                    @item.Name : <i>@item.Description</i>
                </p>
            }
        </div>
        @if (Model.isOrganizer)
        {
            <a asp-action="InterestSelection" asp-route-id="@Model.CurrentEvent.Id">Add or Remove Interests</a>
        }

    </div>
    <div class="col-md-6">
        <h2>Participants</h2>
        <div class="table-bordered">
            @foreach (var person in Model.Participants)
            {
                @Html.ActionLink(@person.FirstName + " " + @person.LastName, "Profile", new { id = person.Id, eId = Model.CurrentEvent.Id })<br>
            }
        </div>
        @if (User.IsInRole("Standard"))
        {
            @if (Model.particpantCount < Model.CurrentEvent.MaxParticipants)
            {
                @Html.ActionLink("Join This Event", "JoinConfirm", new { Id = Model.CurrentEvent.Id })
            }
            else
            {
                <p>
                    This Event is currently full
                </p>
            }
        }
        else
        {
                <p>
                    Please <a asp-area="Identity" asp-page="/Account/Login">login</a> to JOIN!
                </p>
        }

    </div>
</div>






